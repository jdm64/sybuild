
alias StrPtr = @[]int8;

int strlen(StrPtr str);

StrPtr strcpy(StrPtr dest, StrPtr source);

@void memcpy(@void dest, @void source, int size);

class cstring
{
	struct this {
		StrPtr ptr;
	}

	this(StrPtr str)
	{
		if (!str) {
			ptr = null;
			return;
		}
		ptr = new [strlen(str) + 1]int8;
		strcpy(ptr, str);
	}

	void setRange(StrPtr str, int len)
	{
		if (ptr)
			~this();
		ptr = new [len + 1]int8;
		memcpy(ptr, str, len);
	}

	void set(StrPtr str)
	{
		setRange(str, strlen(str));
	}

	@cstring addRange(StrPtr str, int len)
	{
		if (!ptr) {
			setRange(str, len);
			return this;
		}
		auto size = strlen(ptr);
		auto p = new [size + len + 1]int8;
		memcpy(p, ptr, size);
		memcpy(p[size]$, str, len + 1);
		~this();
		ptr = p;

		return this;
	}

	@cstring add(StrPtr str)
	{
		addRange(str, strlen(str));
		return this;
	}

	StrPtr get()
	{
		return ptr;
	}

	~this()
	{
		delete ptr;
	}
}
