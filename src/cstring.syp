
alias StrPtr = @[]int8;

int strlen(StrPtr str);

StrPtr strcpy(StrPtr dest, StrPtr source);

@void memcpy(@void dest, @void source, int size);

class cstring
{
	struct this {
		StrPtr ptr;
	}

	this(StrPtr str)
	{
		if (!str) {
			ptr = null;
			return;
		}
		ptr = new [strlen(str) + 1]int8;
		strcpy(ptr, str);
	}

	void set(StrPtr c_ptr)
	{
		if (ptr)
			~this();
		ptr = new [strlen(c_ptr) + 1]int8;
		strcpy(ptr, c_ptr);
	}

	void add(StrPtr str)
	{
		if (!ptr) {
			set(str);
			return;
		}
		auto len1 = strlen(ptr);
		auto len2 = strlen(str);
		auto p = new [len1 + len2 + 1]int8;
		memcpy(p, ptr, len1);
		memcpy(p[len1]$, str, len2 + 1);
		~this();
		ptr = p;
	}

	StrPtr get()
	{
		return ptr;
	}

	~this()
	{
		delete ptr;
	}
}
