import "cstring.syp";

opaque FILE;

@FILE popen(StrPtr cmd, StrPtr type);

int pclose(@FILE stream);

int fread(@void ptr, int size, int count, @FILE stream);

int fwrite(@void ptr, int size, int count, @FILE stream);

@FILE stdout;

void write(StrPtr str, @FILE stream)
{
	fwrite(str, 1, strlen(str), stream);
}

void readOutput(@FILE stream)
{
	[128]int8 buf;
	int n;
	while ((n = fread(buf$, 1, sizeof buf, stream)) > 0)
		fwrite(buf$, 1, n, stdout);
}

int runCmd(StrPtr cmd)
{
	auto pf = popen(cmd, "r");
	readOutput(pf);
	return pclose(pf);
}

class Builder
{
	struct this {
		cstring outfile, ofiles;
	}

	this() outfile{"out.bin"}, ofiles{null}
	{}

	int compileFile(StrPtr file)
	{
		cstring cmd{"saphyr "};
		cmd.add(file);

		auto r = runCmd(cmd.get());
		cmd.~this();
		return r;
	}

	void addOFile(StrPtr file)
	{
		int i;
		for (i = strlen(file) - 1; file[i] != '.'; i--)
		{}

		ofiles.addRange(file, i).add(".o").add(" ");
	}

	int parse(int argc, @[]StrPtr argv)
	{
		for (int i = 1; i < argc; i++) {
			if (!strcmp("-o", argv[i]) && i + 1 < argc) {
				outfile.set(argv[++i]);
				continue;
			}
			auto r = compileFile(argv[i]);
			if (r)
				return r;
			addOFile(argv[i]);
		}
		return 0;
	}

	int run()
	{
		cstring cmd{"clang "};
		cmd.add("-o ").add(outfile.get()).add(" ").add(ofiles.get());

		auto r = runCmd(cmd.get());
		cmd.~this();
		return r;
	}
}

int main(int argc, @[]StrPtr argv)
{
	if (argc < 2) {
		write("no arguments provided\n", stdout);
		return -1;
	}

	Builder builder;
	auto r = builder.parse(argc, argv);
	if (!r)
		r = builder.run();
	builder.~this();
	return r;
}
